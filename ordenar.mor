paquete ordenar;

CABECERA
  CONSTANTE
    N : entero = 10;
  INTERFAZ
    procedimiento ordenarQuicksort (array : lista [1..N] de entero modificable);
    procedimiento ordenarMonticulos (array : lista [1..N] de entero modificable);

CUERPO

/*
primer algoritmo de ordenacion: implementación del quicksort
*/
procedimiento ordenarQuicksort (array : lista [1..N] de entero modificable)

  variable
    limIzdo : entero = 0;
    limDcho : entero = N-1;
    i : entero;

  {

  llenarLista(array);

  escribir("LISTA INICIAL\n");
  repite elemento i en 1..N {
    escribir("%d -> %d\n",i,array[i]);
    }

  quicksort(array,limIzdo,limDcho);

  escribir("LISTA ORDENADA\n");
  repite elemento i en 1..N {
    escribir("%d -> %d\n",i,array[i]);
    }

  }


// quicksort - algoritmo de ordenacion
procedimiento quicksort (array : lista [1..N] de entero modificable; limIzdo,limDcho: entero)

  variable
    izdo : entero = limIzdo;
    dcho : entero = limDcho;
    pivote : entero;

  {

  pivote = array[(izdo+dcho)/2];

  mientras izdo=<dcho {

    mientras array[izdo]<pivote /\ izdo<limDcho {
      izdo = izdo+1;
      }

    mientras pivote<array[dcho] /\ dcho > limIzdo {
      dcho = dcho-1;
      }

    si (izdo=<dcho) entonces {
      temporal = array[izdo];
      array[izdo] = array[dcho];
      array[dcho] = temporal;
      izdo = izdo+1;
      dcho = dcho-1;
      }
    }

  si izdo<dcho entonces {
    quicksort(array,limIzdo,dcho);
    }

  si dcho>izdo entonces  {
    quicksort(array,izdo,limDcho);
    }

  }

/* llena la listaq que le pasamos como paramtero con numeros aleatorios */
procedimiento llenarLista (array : lista[1..N] de entero modificable)
  variable
    i : entero;
  {
  REPITE elemento i en 1..N {
    array[i] = aleatorio(1,100);
    }
  }


/*
segundo algoritmo de ordenacion: procedimiento ordenacion por monticulos
*/

procedimiento ordenarMonticulos (array : lista [1..N] de entero modificable)

  variable
    i,temporal : entero;

  {

  llenarLista(array);

  construirMonticulo(array);

  repite elemento i en 1..N-1 descendente {
    temporal = array[i+1];
    array[i+1] = array[1];
    array[1] = temporal;

    meter(array,1,i);
    }

  repite elemento i en 1..N {
    escribir(array[i]);
    }

  }

// procedimiento auxiliar
procedimiento meter (array : lista [1..N] de entero modificable; i,n : entero)
  variable
    temporal : entero = array[i];
    j : entero = 2*i;
    terminar: booleano = falso;

  {

  mientras j =< n /\ !terminar {

    si (j < n) /\ (array[j] < array[j+1]) entonces {
      j = j+1;
      }

    si temporal > array[j] entonces {
      terminar = verdadero;
      }
    sino  {
      array[j/2] = array[j];
      j = j*2;
      }

    }

  array[j/2] = temporal;

  }

procedimiento construirMonticulo (array : lista [1..N] de entero modificable)
  variable
    i : entero;
  {
  repite elemento i en 1..N/2 descendente {  // el tamaño del array es N
    meter(array,i,N);
    }
  }
